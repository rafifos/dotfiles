# `.zshrc`
#
# [Read when interactive]
#
# I put here everything needed only for interactive usage:
#
# - Prompt
# - Command completion
# - Command correction
# - Command suggestion
# - Command highlighting
# - Output coloring
# - Aliases
# - Key bindings
# - Commands history management
# - Other miscellaneous interactive tools (`auto_cd`, `manydots-magic`)...
#
# Source: https://unix.stackexchange.com/a/487889
#
export EDITOR='nvim'
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
export GPG_TTY="$(tty)"
export VISUAL="${EDITOR}"

# Remove older command from the history if a duplicate is to be added.
setopt HIST_IGNORE_ALL_DUPS

# Set editor default keymap to emacs (\`-e\`) or vi (\`-v\`)
bindkey -e

# Determines how long to wait (in hundredths of a second) for additional
# characters in sequence. This increases responsiveness when changing between
# NORMAL and INSERT mode. Note that this can result in issues with other
# terminal commands that depended on this delay. If you have issues try raising
# the delay. Default is 0.4 seconds.
#
# 10ms for key sequences.
export KEYTIMEOUT=1

# Enable spelling correction prompts.
# See http://zsh.sourceforge.net/Doc/Release/Options.html#index-CORRECT
setopt CORRECT

# Set a custom spelling correction prompt.
export SPROMPT='zsh: Correct %F{red}%R%f to %F{green}%r%f [n: no, y: yes, a: abort, e: edit]? '

# Prevents M-b and M-f (backward-word and forward-word) to jump over an entire
# /path/location. Instead, this makes it jumps based on words separated by an
# "/", like on Bash.
export WORDCHARS=''

# Set a custom path for the completion dump file.
# If none is provided, the default \${ZDOTDIR:-\${HOME}}/.zcompdump is used.
#zstyle ':zim:completion' dumpfile \"\${ZDOTDIR:-\${HOME}}/.zcompdump-\${ZSH_VERSION}\"

# Enable double-dot expansion.
# This appends '../' to your input for each '.' you type after an initial '..'
zstyle ':zim:input' double-dot-expand yes

# Set a ruby version-management-tool. Options include 'rbenv' and 'rvm'.
zstyle ':zim:ruby' version-management-tool 'rbenv'

# Defines the identities (from ~/.ssh) that will be loaded and cached on login.
zstyle ':zim:ssh' ids 'id_rsa'

# Set a custom terminal title format. Use prompt expansion strings for dynamic 
# data.
# See http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Simple-Prompt-Escapes
# For example, '%n@%m: %~' corresponds to 'username@host: /current/directory'.
zstyle ':zim:termtitle' format '%n in %~ at %m'

# Enables nvm lazy loading b/c nvm is laggy as fuck.
export NVM_LAZY_LOAD=true

# Show user prompt section (true, false, always or needed).
export SPACESHIP_USER_SHOW='always'

# Show host prompt section (true, false or always).
export SPACESHIP_HOST_SHOW='always'

# The minimum number of seconds for showing execution time section.
export SPACESHIP_EXEC_TIME_ELAPSED=5

# Battery level below which battery section will be shown.
export SPACESHIP_BATTERY_THRESHOLD=30

# Show exit code of last command.
export SPACESHIP_EXIT_CODE_SHOW=true

# Customize the style that the suggestions are shown with.
# See https://github.com/zsh-users/zsh-autosuggestions/blob/master/README.md#suggestion-highlight-style
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=10'

# Set what highlighters will be used.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md
export ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets root)

# Customize the main highlighter styles.
# See https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md#how-to-tweak-it
typeset -A ZSH_HIGHLIGHT_STYLES
export ZSH_HIGHLIGHT_STYLES[comment]='fg=10'

case ${OSTYPE} in
  darwin*)
    if [[ ! -f "${HOME}/.iterm2_shell_integration.zsh" ]]; then
      curl -fLsS -o "${HOME}/.iterm2_shell_integration.zsh" 'https://iterm2.com/shell_integration/zsh'
    fi
    source "${HOME}/.iterm2_shell_integration.zsh"

    alias emulator='$HOME/Library/Android/sdk/emulator/emulator -avd Pixel_3_API_29 &'
    alias qba='cd $HOME/WorkDir/quero/qb_app_rn'
    alias quero='cd $HOME/WorkDir/quero'
    alias screenrecord='xcrun simctl io booted recordVideo "Record from "$(date)".gif"'
  ;;
esac

alias cp='cp -ipv'
alias diff='diff -u'
alias less='less -RFXx2'
alias mv='mv -iv'
alias rm='rm -iv'
alias vim='nvim'

alias dotfiles='cd $HOME/WorkDir/dotfiles'
alias wd='cd $HOME/WorkDir'

# Installs and sources ZIM if it isn't installed.
if [[ ! -f "${ZIM_HOME}/zimfw.zsh" ]]; then
  curl --create-dirs -fLsS -o "${ZIM_HOME}/zimfw.zsh" 'https://github.com/zimfw/zimfw/releases/latest/download/zimfw.zsh' && source "${ZIM_HOME}/zimfw.zsh" install
fi

# Update static initialization script if it's outdated, before sourcing it.
if [[ "${ZIM_HOME}/init.zsh" -ot "${HOME}/.zimrc" ]]; then
  source "${ZIM_HOME}/zimfw.zsh" init -q
fi
source "${ZIM_HOME}/init.zsh"

# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init.
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# Bind up and down keys.
zmodload -F zsh/terminfo +p:terminfo
if [[ -n "${terminfo[kcuu1]}" && -n "${terminfo[kcud1]}" ]]; then
  bindkey "${terminfo[kcuu1]}" history-substring-search-up
  bindkey "${terminfo[kcud1]}" history-substring-search-down
fi

bindkey '^P' history-substring-search-up
bindkey '^N' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down