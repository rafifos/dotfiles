# Configuration for lazydocker.
# See:
#   1. https://github.com/jesseduffield/lazydocker/blob/master/docs/Config.md
#   2. https://github.com/jesseduffield/lazydocker/blob/master/docs/keybindings/Keybindings_en.md
#   3. https://pkg.go.dev/github.com/jesseduffield/lazydocker/pkg/config

reporting: "off"

gui:
  returnImmediately: true
  wrapMainPanel: false
  showAllContainers: true
  scrollHeight: 2
  theme:
    activeBorderColor:
      - cyan
    inactiveBorderColor:
      - black
      - bold
    optionsTextColor:
      - blue

update:
  dockerRefreshInterval: 100ms

oS:
  openCommand: open {{filename}}
  openLinkCommand: open {{link}}

stats:
  graphs:
    - caption: CPU (%)
      statPath: DerivedStats.CPUPercentage
      color: blue
    - caption: Memory (%)
      statPath: DerivedStats.MemoryPercentage
      color: green

commandTemplates:
  # Docker
  viewContainerLogs: docker logs --timestamps --follow --since=60m {{ .Container.ID }}
  containerLogs: docker logs --timestamps --follow --since=60m {{ .Container.ID }}

  # docker-compose
  dockerCompose: docker-compose

  dockerComposeConfig: "{{ .DockerCompose }} config"
  checkDockerComposeConfig: "{{ .DockerCompose }} config --quiet"

  allLogs: "{{ .DockerCompose }} logs --tail=300 --follow"
  viewAlLogs: "{{ .DockerCompose }} logs"
  serviceLogs: "{{ .DockerCompose }} logs --since=60m --follow {{ .Service.Name }}"
  viewServiceLogs: "{{ .DockerCompose }} logs --follow {{ .Service.Name }}"

  restartService: "{{ .DockerCompose }} restart {{ .Service.Name }}"
  stopService: "{{ .DockerCompose }} stop {{ .Service.Name }}"

  rebuildService: "{{ .DockerCompose }} up -d --build {{ .Service.Name }}"
  recreateService: "{{ .DockerCompose }} up -d --force-recreate {{ .Service.Name }}"

  serviceTop: "{{ .DockerCompose }} top {{ .Service.Name }}"

customCommands:
  containers:
    - name: bash
      attach: true
      command: "docker exec -it {{ .Container.ID }} /bin/sh -c 'eval $(grep ^$(id -un): /etc/passwd | cut -d : -f 7-)'"
      serviceNames: []

  services:
    # Run a single service in detached mode.
    - name: up-detached
      attach: false
      command: "{{ .DockerCompose }} up --detach {{ .Service.Name }}"
    # Stop, if required, and remove all containers and volumes of a service.
    - name: wipe
      command: "{{ .DockerCompose }} rm --stop --force -v {{ .Service.Name }}"
