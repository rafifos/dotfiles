#!/usr/bin/env bash

# Enable xtrace if the DEBUG environment variable is set
if [[ ${DEBUG-} =~ ^1|yes|true$ ]]; then
  set -o xtrace # Trace the execution of the script (debug)
fi

# Only enable these shell behaviours if we're not being sourced
# Approach via: https://stackoverflow.com/a/28776166/8787985
if ! (return 0 2>/dev/null); then
  # A better class of script...
  set -o errexit  # Exit on most errors (see the manual)
  set -o nounset  # Disallow expansion of unset variables
  set -o pipefail # Use last non-zero exit code in a pipeline
fi

# Enable errtrace or the error trap handler will not work as expected
set -o errtrace # Ensure the error trap handler is inherited

# Sets `\n\t` as the word separator for the Interal Field Separator,
# this tells bash how to separate words, and governs how it will
# iterate through a sequence.
IFS=$'\n\t'

# Keep-alive: update existing `sudo` time stamp until we're finished.
while true; do
  sudo -n true
  sleep 30
  kill -0 "$$" || exit
done 2>/dev/null &

function install-android-udev-rules() {
  # Install M0Rf30's udev rules for the Android USB driver
  # See: https://github.com/M0Rf30/android-udev-rules#other-distros
  git clone https://github.com/M0Rf30/android-udev-rules.git
  cd android-udev-rules

  # Copy files
  sudo cp -v 51-android.rules /etc/udev/rules.d/51-android.rules
  sudo cp -v android-udev.conf /usr/lib/sysusers.d/

  # Set permissions
  sudo chmod --verbose 0644 /etc/udev/rules.d/51-android.rules
  sudo chmod --verbose 0644 /usr/lib/sysusers.d/android-udev.conf

  # Create the `adbusers` group
  sudo systemd-sysusers

  # Add the current user to `adbusers`
  sudo usermod -aG adbusers "$USER"

  # Restart UDEV
  sudo udevadm control --reload-rules
  sudo systemctl restart systemd-udevd.service

  cd ..
}

function install-packages() {
  # Install base packages.
  xargs <install-base.txt sudo apt install --assume-yes

  # Homebrew is a great way to install packages without messing with
  # dependencies system-wide.
  if [[ ! -d /home/linuxbrew/.linuxbrew ]]; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || return 1
  fi
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)" && brew bundle --verbose

  CWD="$PWD"
  TMPD="$(mktemp -d)"

  if [[ "$(</proc/sys/kernel/osrelease)" != *microsoft* ]]; then
    # Remove unneeded packages.
    xargs <remove-gnome.txt sudo apt autoremove --purge --assume-yes
    sudo rm -rfv /usr/share/fonts/truetype/libreoffice

    # Workaround for CORS issues with @mesalva/api
    sudo "$(which hostess)" add local.mesalva.com 127.0.0.1

    # An entirely open source driver and user-space daemon that allows you to
    # manage your Razer peripherals on GNU/Linux.
    sudo add-apt-repository -yu ppa:openrazer/stable

    # A frontend for OpenRazer that enables Razer devices to control lighting
    # effects and more on GNU/Linux.
    sudo add-apt-repository ppa:polychromatic/stable

    # Docker Engine is an open source containerization technology for building
    # and containerizing your applications.
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list

    # The biggest Flatpak repository for Linux.
    flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

    # Install GNOME specific packages.
    echo "ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true" | sudo debconf-set-selections
    xargs <install-gnome.txt sudo apt install --assume-yes

    # Install Flatpak software.
    xargs <install-flatpak.txt flatpak install --user --noninteractive

    # Don't clutter CWD with downloaded packages.
    cd "$TMPD"

    # Install the latest version of the Chrome browser.
    install-android-udev-rules

    # Code editing. Redefined.
    curl -fsSL 'https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64' -o code_amd64.deb

    # The web browser from Google.
    curl -fsSLO 'https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb'

    # Encrypt everything.
    curl -fsSLO 'https://prerelease.keybase.io/keybase_amd64.deb'
  else
    # Install WSL specific packages.
    xargs <install-wsl.txt sudo apt install --assume-yes

    # Don't clutter CWD with downloaded packages.
    cd "$TMPD"

    # Legendary Git GUI client for Windows, Mac & Linux.
    curl -fsSLO "https://release.gitkraken.com/linux/gitkraken-amd64.deb"
  fi

  # Install downloaded .deb files.
  sudo apt install --assume-yes ./*.deb

  # Go back to our current directory.
  cd "$CWD"

  # Post-install tasks
  sudo usermod -aG docker "$USER"
  sudo usermod -aG plugdev "$USER"
}

function link-targets() {
  # Common configurations.
  CONFIG='config.yaml'
  DOTBOT_DIR='.dotbot'
  DOTBOT_BIN='bin/dotbot'

  BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

  cd "${BASEDIR}"
  git -C "${DOTBOT_DIR}" submodule sync --quiet --recursive
  git submodule update --init --recursive "${DOTBOT_DIR}"

  "${BASEDIR}/${DOTBOT_DIR}/${DOTBOT_BIN}" -d "${BASEDIR}" -c "${CONFIG}" "${@}" --verbose
}

install-packages
link-targets "$@"
