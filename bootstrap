#!/usr/bin/env bash
# shellcheck disable=SC2155,SC1090
#
# References:
# - https://github.com/arcticicestudio/igloo/blob/ac9f7bf7a3e931ff4825757a428e9c00fbb45543/snowblocks/bash/bootstrap
# - https://misc.flogisoft.com/bash/tip_colors_and_formatting
#

##########
# Functions
#
log_info() {
  printf "\e[1;34m[INFO]\e[0m %s\n" "$*"
}

log_warn() {
  printf "\e[1;33m[WARN]\e[0m %s\n" "$*"
}

log_error() {
  printf "\e[1;31m[ERROR]\e[0m %s\n" "$*" 1>&2
}

log_and_sleep() {
  log_info "$1"
  sleep 1
}

warn_elevation() {
  log_warn "This operation requires elevation, you've been warned"
}

pause() {
  read -rsp $'Press any key to continue...\n' -n 1
}

pause_and_clear() {
  pause && clear
}

inject_linuxbrew() {
  test -d "$HOME/.linuxbrew" && eval "$("$HOME"/.linuxbrew/bin/brew shellenv)"
  test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
}

##########
# Script entrypoint
#
clear

log_and_sleep "Installing development packages"
warn_elevation
sudo apt install -y linux-headers-"$(uname -r)" build-essential
pause_and_clear

if [[ ! "$(</proc/sys/kernel/osrelease)" == *microsoft* ]]; then
  log_and_sleep "Adding keys to apt"
  curl -fsSL 'https://packages.microsoft.com/keys/microsoft.asc' | sudo apt-key add
  curl -fsSL 'https://dl-ssl.google.com/linux/linux_signing_key.pub' | sudo apt-key add
  curl -fsSL 'https://download.docker.com/linux/ubuntu/gpg' | sudo apt-key add
  curl -fsSL 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x073e051d7b2aee37' | sudo apt-key add
  curl -fsSL 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x96b9cd7c22e2c8c5' | sudo apt-key add
  curl -fsSL 'https://bintray.com/user/downloadSubjectPublicKey?username=bintray' | sudo apt-key add
  curl -fsSL 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xc42d52715a84c7d0d02fc740c1d89326b1c71ab9' | sudo apt-key add
  pause_and_clear

  log_and_sleep "Adding repositories to apt"
  echo 'deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main' | sudo tee /etc/apt/sources.list.d/vscode.list
  echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb stable main' | sudo tee /etc/apt/sources.list.d/google-chrome.list
  echo 'deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable' | sudo tee /etc/apt/sources.list.d/docker.list
  echo 'deb [arch=amd64] http://ppa.launchpad.net/openrazer/stable/ubuntu bionic main' | sudo tee /etc/apt/sources.list.d/openrazer.list
  echo 'deb [arch=amd64] http://ppa.launchpad.net/polychromatic/stable/ubuntu bionic main' | sudo tee /etc/apt/sources.list.d/polychromatic.list
  echo "deb [arch=amd64] https://dl.bintray.com/beekeeper-studio/releases disco main" | sudo tee /etc/apt/sources.list.d/beekeeper-studio.list
  echo 'deb [arch=amd64] http://ppa.launchpad.net/philip.scott/elementary-tweaks/ubuntu bionic main' | sudo tee /etc/apt/sources.list.d/elementary-tweaks.list
  pause_and_clear

  log_and_sleep "Updating apt sources"
  sudo apt update
  pause_and_clear

  log_and_sleep "Installing apt packages"

  # shellcheck disable=SC2006,SC2046
  sudo apt install -y \
    ubuntu-restricted-extras \
    openvpn-systemd-resolved \ # Integrates OpenVPN with `systemd-resolved`
    code \
    google-chrome-stable \
    docker-ce docker-ce-cli containerd.io \
    openrazer-meta polychromatic \
    beekeeper-studio \
    elementary-tweaks
    pause_and_clear

  log_and_sleep "Installing .deb packages"
  TMPDIR="$PWD/tmp"

  cd "$TMPDIR" || log_error "Error entering tmp directory, exiting." && exit 1

  curl -fsSLO 'https://releases.hyper.is/download/deb'
  sudo dpkg -i 'deb'
  sudo apt -f -y install

  curl -fsSLO 'https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb'
  sudo dpkg -i 'session-manager-plugin.deb'

  cd ..
  rm -rf "$TMPDIR"
  unset TMPDIR
  pause_and_clear

  log_and_sleep "Installing Flatpak packages"
  if ! hash flatpak 2>/dev/null; then
    log_error "Flatpak is not installed, exiting."
    exit 1
  fi

  flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

  flatpak install --user flathub ca.desrt.dconf-editor
  flatpak install --user flathub com.axosoft.GitKraken
  flatpak install --user flathub com.discordapp.Discord
  flatpak install --user flathub com.getpostman.Postman
  flatpak install --user flathub com.slack.Slack
  flatpak install --user flathub com.spotify.Client
  pause_and_clear

  log_and_sleep "Removing unneeded packages"
  sudo apt autoremove --purge \
    pantheon-terminal
  pause_and_clear

  log_and_sleep "Configuring Docker"
  sudo groupadd docker
  sudo usermod -aG docker "$USER"
  sudo gpasswd -a "$USER" plugdev
  log_warn "You need to restart your session for the changes to take effect"
  pause_and_clear

  log_and_sleep "Installing ngrok"
  curl -fsSLO 'https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip'
  unzip ngrok-stable-linux-amd64.zip
  chmod +x ngrok
  [[ ! -d "$HOME/.local/bin" ]] && mkdir -p "$HOME/.local/bin"
  mv ngrok "$HOME/.local/bin/ngrok"
  rm ngrok-stable-linux-amd64.zip
  pause_and_clear
fi

inject_linuxbrew
if ! hash brew 2>/dev/null; then
  log_and_sleep "Installing Linuxbrew"

  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"

  inject_linuxbrew
  pause_and_clear
fi

log_and_sleep "Installing cli packages via Linuxbrew Bundle"
brew bundle --verbose
pause_and_clear

if [[ ! -x "$(pwd)/homemaker" ]]; then
  log_warn "homemaker not found in current dir, downloading it now."
  curl -fsSL 'https://foosoft.net/projects/homemaker/dl/homemaker_linux_amd64.tar.gz' | tar --extract --gzip
  mv homemaker_linux_amd64/homemaker homemaker
  chmod +x ./homemaker
  rm -rf homemaker_linux_amd64/
fi

log_and_sleep "Deploying dotfiles using homemaker"
./homemaker -clobber -verbose config.toml "$PWD"
pause_and_clear

log_and_sleep "Installing asdf-vm plugins"
source "$(brew --prefix asdf)/asdf.sh"

# :/
if [[ ! "$(</proc/sys/kernel/osrelease)" == *microsoft* ]]; then
log_info "==> Ruby"
  asdf plugin add ruby
  export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
  asdf install ruby latest:3
  asdf global ruby "$(asdf latest ruby 3)"

  log_info "==> PostgreSQL"
  asdf plugin-add postgres
  asdf install postgres latest:12
  asdf global postgres "$(asdf latest postgres 12)"
  pause
fi

log_info "==> Node.js"
asdf plugin add nodejs
bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
asdf install nodejs latest:14
asdf global nodejs "$(asdf latest nodejs 14)"
pause

log_info "==> Python (2 and 3)"
asdf plugin-add python
asdf install python latest:2
asdf install python latest:3
asdf global python "$(asdf latest python 2)"
asdf global python "$(asdf latest python 3)"
update-alternatives --install "$HOME/.local/bin/python" python "$(command -v python3)" 1
pause_and_clear

log_info "Setting \"zsh\" as the default shell for user $USER"
warn_elevation
sudo sh -c "echo $(command -v zsh) >> /etc/shells"
chsh -s "$(command -v zsh)" "$USER"
pause_and_clear

log_warn "Don't forget to grab Iosevka from https://github.com/be5invis/Iosevka"
